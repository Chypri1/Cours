{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red202\green202\blue202;\red89\green138\blue67;\red23\green23\blue23;
\red70\green137\blue204;\red212\green214\blue154;\red140\green211\blue254;\red67\green192\blue160;\red183\green111\blue179;
\red167\green197\blue152;\red194\green126\blue101;\red205\green173\blue106;}
{\*\expandedcolortbl;;\cssrgb\c83137\c83137\c83137;\cssrgb\c41569\c60000\c33333;\cssrgb\c11765\c11765\c11765;
\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c66667;\cssrgb\c61176\c86275\c99608;\cssrgb\c30588\c78824\c69020;\cssrgb\c77255\c52549\c75294;
\cssrgb\c70980\c80784\c65882;\cssrgb\c80784\c56863\c47059;\cssrgb\c84314\c72941\c49020;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf3 \cb4 \strokec3 /* Note that memset() is a byte assignment and this is a 32-bit assignment, so they're not directly equivalent. */\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb4 \strokec5 SDL_FORCE_INLINE\cf2 \strokec2  \cf5 \strokec5 void\cf2 \strokec2  \cf6 \strokec6 SDL_memset4\cf2 \strokec2 (\cf5 \strokec5 void\cf2 \strokec2  *\cf7 \strokec7 dst\cf2 \strokec2 , \cf8 \strokec8 Uint32\cf2 \strokec2  \cf7 \strokec7 val\cf2 \strokec2 , \cf8 \strokec8 size_t\cf2 \strokec2  \cf7 \strokec7 dwords\cf2 \strokec2 )\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb4 \strokec9 #ifdef\cf5 \strokec5  __APPLE__\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf6 \strokec6 memset_pattern4\cf2 \strokec2 (\cf7 \strokec7 dst\cf2 \strokec2 , &\cf7 \strokec7 val\cf2 \strokec2 , \cf7 \strokec7 dwords\cf2 \strokec2  * \cf10 \strokec10 4\cf2 \strokec2 );\cb1 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb4 \strokec9 #elif\cf5 \strokec5  \cf9 \strokec9 defined\cf5 \strokec5 (__GNUC__) \cf2 \strokec2 &&\cf5 \strokec5  \cf9 \strokec9 defined\cf5 \strokec5 (i386)\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 int\cf2 \strokec2  u0, u1, u2;\cb1 \
\cb4     \cf5 \strokec5 __asm__\cf2 \strokec2  _\cf6 \strokec6 _volatile__\cf2 \strokec2  (\cb1 \
\cb4         \cf11 \strokec11 "cld \cf12 \strokec12 \\n\\t\cf11 \strokec11 "\cf2 \cb1 \strokec2 \
\cb4         \cf11 \strokec11 "rep ; stosl \cf12 \strokec12 \\n\\t\cf11 \strokec11 "\cf2 \cb1 \strokec2 \
\cb4         : \cf11 \strokec11 "=&D"\cf2 \strokec2  (u0), \cf11 \strokec11 "=&a"\cf2 \strokec2  (u1), \cf11 \strokec11 "=&c"\cf2 \strokec2  (u2)\cb1 \
\cb4         : \cf11 \strokec11 "0"\cf2 \strokec2  (dst), \cf11 \strokec11 "1"\cf2 \strokec2  (val), \cf11 \strokec11 "2"\cf2 \strokec2  (\cf6 \strokec6 SDL_static_cast\cf2 \strokec2 (Uint32, dwords))\cb1 \
\cb4         : \cf11 \strokec11 "memory"\cf2 \cb1 \strokec2 \
\cb4     );\cb1 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb4 \strokec9 #else\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4     \cf5 \strokec5 size_t\cf2 \strokec2  _n = (dwords + \cf10 \strokec10 3\cf2 \strokec2 ) / \cf10 \strokec10 4\cf2 \strokec2 ;\cb1 \
\cb4     Uint32 *_p = \cf6 \strokec6 SDL_static_cast\cf2 \strokec2 (Uint32 *, dst);\cb1 \
\cb4     Uint32 _val = (val);\cb1 \
\cb4     \cf9 \strokec9 if\cf2 \strokec2  (dwords == \cf10 \strokec10 0\cf2 \strokec2 )\cb1 \
\cb4         \cf9 \strokec9 return\cf2 \strokec2 ;\cb1 \
\cb4     \cf9 \strokec9 switch\cf2 \strokec2  (dwords % \cf10 \strokec10 4\cf2 \strokec2 )\cb1 \
\cb4     \{\cb1 \
\cb4         \cf9 \strokec9 case\cf2 \strokec2  \cf10 \strokec10 0\cf2 \strokec2 : \cf9 \strokec9 do\cf2 \strokec2  \{    *_p++ = _val;\cf3 \strokec3    /* fallthrough */\cf2 \cb1 \strokec2 \
\cb4         case \cf10 \strokec10 3\cf2 \strokec2 :         *_p++ = _val;\cf3 \strokec3    /* fallthrough */\cf2 \cb1 \strokec2 \
\cb4         case \cf10 \strokec10 2\cf2 \strokec2 :         *_p++ = _val;\cf3 \strokec3    /* fallthrough */\cf2 \cb1 \strokec2 \
\cb4         case \cf10 \strokec10 1\cf2 \strokec2 :         *_p++ = _val;\cf3 \strokec3    /* fallthrough */\cf2 \cb1 \strokec2 \
\cb4         \} \cf9 \strokec9 while\cf2 \strokec2  ( --_n );\cb1 \
\cb4     \}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb4 \strokec9 #endif\cf2 \cb1 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \}\cb1 \
\
\
}